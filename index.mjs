
//
// Notes: This is kind of a weird approach to loading a library. Why do it?
// 
// Short story: I don't want to break compilers or minifiers with the obfuscated internals of this library.
// So, I base-64 encode it, and lazy-load the internals of the class at runtime.
// 
//
class XRAY{

  xray;
  #iframeSrc;

  constructor (ifrmeSrc = undefined){
    if(ifrmeSrc){
      this.#iframeSrc = ifrmeSrc;
    }
  }

  async load() {
    // Decode the base64 string
    const decodedString = atob(
     ""
    );

    // Create a Blob from the decoded string
    const blob = new Blob([decodedString], { type: "application/javascript" });

    // Create a URL for the Blob
    const blobURL = URL.createObjectURL(blob);

    // We'll use a dynamic import
    let { XRAY } = await import(blobURL);

    // Put a XRAY instance on this instance
    if(this.#iframeSrc){
      this.xray = new XRAY(this.#iframeSrc);
    } else {
      this.xray = new XRAY();
    }
    
  }
}

export { XRAY };
