
//
// Notes: This is kind of a weird approach to loading a library. Why do it?
// 
// Short story: I don't want to break compilers or minifiers with the obfuscated internals of this library.
// So, I base-64 encode it, and lazy-load the internals of the class at runtime.
// 
//
class XRAY{

  xray;
  #iframeSrc;

  constructor (ifrmeSrc = undefined){
    if(ifrmeSrc){
      this.#iframeSrc = ifrmeSrc;
    }
  }

  async load() {
    // Decode the base64 string
    const decodedString = atob(
     "Y29uc3QgYTBfMHgzMjRiMDE9YTBfMHgyYTM5O2Z1bmN0aW9uIGEwXzB4MmEzOShfMHgyZmE4M2YsXzB4NGUwNTVmKXtjb25zdCBfMHgxYTU2YmE9YTBfMHgxYTU2KCk7cmV0dXJuIGEwXzB4MmEzOT1mdW5jdGlvbihfMHgyYTM5ZDcsXzB4MjYwYTY0KXtfMHgyYTM5ZDc9XzB4MmEzOWQ3LTB4YWY7bGV0IF8weDEyY2ZiZj1fMHgxYTU2YmFbXzB4MmEzOWQ3XTtyZXR1cm4gXzB4MTJjZmJmO30sYTBfMHgyYTM5KF8weDJmYTgzZixfMHg0ZTA1NWYpO31mdW5jdGlvbiBhMF8weDFhNTYoKXtjb25zdCBfMHgxZjc1ZTU9WydhcHBlbmRDaGlsZCcsJ29iamVjdFN0b3JlJywncmVtb3ZlRXZlbnRMaXN0ZW5lcicsJ2Zyb20nLCdfc3VwcG9ydHNXZWJDcnlwdG8nLCcxMzM3c3FZc3VPJywnc3RyaW5naWZ5JywnNzk0NjkzMHNmRENMTScsJ29uc3VjY2VzcycsJ2h0dHBzOi8vZGV2LndvbGNvdHQua2V5cmkuY29tJywnbG9jYXRpb24nLCdzdHlsZScsJ29udXBncmFkZW5lZWRlZCcsJ2pvaW4nLCdlcnJvcicsJzE2Y3ZqYnpXJywnX2lGcmFtZVJlYWR5JywnQnJvd3Nlclx4MjBOb3RceDIwU3VwcG9ydGVkLlx4MjBgSW5kZXhlZERCQ2BceDIwVW5hdmFpbGFibGUuJywndHJhbnNhY3Rpb24nLCd0YXJnZXQnLCdwb3N0TWVzc2FnZScsJ29yaWdpbicsJ19zdXBwb3J0c09wdGlvbmFsQ2hhaW5pbmcnLCdjcnlwdG8nLCdkZWxldGVEYXRhYmFzZScsJzI0NDhzZ05XaHknLCdCcm93c2VyXHgyME5vdFx4MjBTdXBwb3J0ZWQuXHgyMGBPcHRpb25hbENoYWluaW5nYFx4MjBVbmF2YWlsYWJsZS4nLCdib2R5Jywnb2JqZWN0JywnaHR0cDovL2xvY2FsaG9zdCcsJ1JTQVNTQS1QS0NTMS12MV81JywncmVzdWx0JywnY3JlYXRlRWxlbWVudCcsJ3RvcCcsJ05ldHdvcmtceDIwQ2FsbFx4MjBUaW1lZFx4MjBPdXQnLCdsZWZ0Jywnd2lkdGgnLCdjcmVhdGVPYmplY3RTdG9yZScsJ2NpcGhlcnRleHQnLCcxMTY2MzExeHlOS1lDJywnMC4wNXB4Jywna2V5U3RvcmUnLCczMDg1OTU2blV2bVdnJywnc3JjJywnaW5kZXhlZERCJywnc2lnbicsJ3RvU3RyaW5nJywncG9zaXRpb24nLCc0NjEwMTA1b0lVenlaJywnc3RhdHVzQ2hlY2snLCdtYXAnLCdoZWlnaHQnLCdhYnNvbHV0ZScsJ19pZnJhbWVTdGF0dXNMaXN0ZW5lcicsJ2F0dGFjaFNoYWRvdycsJ29wZW4nLCc0NTg3OTZjY3ZIcEQnLCdvbmNvbXBsZXRlJywnY29udGVudFdpbmRvdycsJ0Jyb3dzZXJceDIwTm90XHgyMFN1cHBvcnRlZC5ceDIwYFdlYkNyeXB0b2BceDIwVW5hdmFpbGFibGUuJywncHJpdmF0ZUtleScsJ2Nsb3NlZCcsJ3N1YnRsZScsJ19pc0luZGV4ZWREQlN1cHBvcnRlZCcsJ2FkZEV2ZW50TGlzdGVuZXInLCdpZnJhbWUnLCcyNjQ0MjEySFBJaUtaJywnLTk5OTlweCcsJ0Jyb3dzZXJceDIwTm90XHgyMFN1cHBvcnRlZC5ceDIwYEluZGV4ZWREQmBceDIwVW5hdmFpbGFibGUuJywnaHR0cHM6Ly9mcC5rZXlyaS5jb20nLCdodHRwczovL2ZwLmtleXJpLmNvbS9zdGF0aWMvaWZyYW1lLmh0bWwnLCdtZXNzYWdlJywnX2lmcmFtZScsJ2RhdGEnLCdwYWRTdGFydCcsJ3NjYW5ceDIwZnVuY3Rpb25ceDIwY3VycmVudGx5XHgyMGJ1c3kuXHgyMFRyeVx4MjBhZ2Fpblx4MjBsYXRlclx4MjBvclx4MjByZWxvYWRceDIwdGhlXHgyMHBhZ2UnLCc0bmZSdFNtJywnYXBpVXJsJywncHJvcGVydHknLCdzY2FuJywnX3N1cHBvcnRzQ3J5cHRvREInLCd2ZXJpZnknLCdkaXYnLCdvbmVycm9yJywncmVhZHdyaXRlJywnZ2VuZXJhdGVLZXknLCdfaXNCdXN5JywnU0hBLTI1NicsJ2FkZCcsJ2NvZGVQb2ludEF0J107YTBfMHgxYTU2PWZ1bmN0aW9uKCl7cmV0dXJuIF8weDFmNzVlNTt9O3JldHVybiBhMF8weDFhNTYoKTt9KGZ1bmN0aW9uKF8weDM1NDdkYixfMHgzMjgzMWEpe2NvbnN0IF8weDk1N2ExMT1hMF8weDJhMzksXzB4NDRhOTFlPV8weDM1NDdkYigpO3doaWxlKCEhW10pe3RyeXtjb25zdCBfMHg1ZjMwYjU9cGFyc2VJbnQoXzB4OTU3YTExKDB4YmIpKS8weDErLXBhcnNlSW50KF8weDk1N2ExMSgweGNjKSkvMHgyK3BhcnNlSW50KF8weDk1N2ExMSgweGQ2KSkvMHgzKihwYXJzZUludChfMHg5NTdhMTEoMHhlMCkpLzB4NCkrLXBhcnNlSW50KF8weDk1N2ExMSgweGM0KSkvMHg1K3BhcnNlSW50KF8weDk1N2ExMSgweDEwNykpLzB4NioocGFyc2VJbnQoXzB4OTU3YTExKDB4ZjMpKS8weDcpKy1wYXJzZUludChfMHg5NTdhMTEoMHhmZCkpLzB4OCooLXBhcnNlSW50KF8weDk1N2ExMSgweGJlKSkvMHg5KSstcGFyc2VJbnQoXzB4OTU3YTExKDB4ZjUpKS8weGE7aWYoXzB4NWYzMGI1PT09XzB4MzI4MzFhKWJyZWFrO2Vsc2UgXzB4NDRhOTFlWydwdXNoJ10oXzB4NDRhOTFlWydzaGlmdCddKCkpO31jYXRjaChfMHgzNDRiNmQpe18weDQ0YTkxZVsncHVzaCddKF8weDQ0YTkxZVsnc2hpZnQnXSgpKTt9fX0oYTBfMHgxYTU2LDB4ZDM0MTMpKTtmdW5jdGlvbiB0b0hleChfMHgzNDRkYmIpe2NvbnN0IF8weGM0OTgwOT1hMF8weDJhMzk7cmV0dXJuIEFycmF5W18weGM0OTgwOSgweGYxKV0oXzB4MzQ0ZGJiKVtfMHhjNDk4MDkoMHhjNildKF8weDNhMjFhYz0+XzB4M2EyMWFjW18weGM0OTgwOSgweGVkKV0oMHgwKVtfMHhjNDk4MDkoMHhjMildKDB4MTApW18weGM0OTgwOSgweGRlKV0oMHg0LCcwJykpW18weGM0OTgwOSgweGZiKV0oJycpO31jbGFzcyBYUkFZe1thMF8weDMyNGIwMSgweGRjKV07W2EwXzB4MzI0YjAxKDB4ZWEpXT0hW107W2EwXzB4MzI0YjAxKDB4ZmUpXT0hW107Y29uc3RydWN0b3IoXzB4YzkxZWQ3PXVuZGVmaW5lZCl7Y29uc3QgXzB4MWZiOGVhPWEwXzB4MzI0YjAxO2lmKCF0aGlzW18weDFmYjhlYSgweDEwNCldKCkpe2NvbnNvbGVbXzB4MWZiOGVhKDB4ZmMpXShfMHgxZmI4ZWEoMHgxMDgpKTt0aHJvdyBuZXcgRXJyb3IoXzB4MWZiOGVhKDB4MTA4KSk7fWVsc2V7fWlmKCF0aGlzW18weDFmYjhlYSgweGYyKV0oKSl7Y29uc29sZVtfMHgxZmI4ZWEoMHhmYyldKF8weDFmYjhlYSgweGNmKSk7dGhyb3cgbmV3IEVycm9yKF8weDFmYjhlYSgweGNmKSk7fWVsc2V7fWlmKCF0aGlzW18weDFmYjhlYSgweGQzKV0pe2NvbnNvbGVbXzB4MWZiOGVhKDB4ZmMpXShfMHgxZmI4ZWEoMHhkOCkpO3Rocm93IG5ldyBFcnJvcihfMHgxZmI4ZWEoMHhkOCkpO31pZighdGhpc1tfMHgxZmI4ZWEoMHhlNCldKCkpe2NvbnNvbGVbXzB4MWZiOGVhKDB4ZmMpXShfMHgxZmI4ZWEoMHhmZikpO3Rocm93IG5ldyBFcnJvcihfMHgxZmI4ZWEoMHhmZikpO31sZXQgXzB4MmE4YjIzPWRvY3VtZW50W18weDFmYjhlYSgweGI0KV0oXzB4MWZiOGVhKDB4ZTYpKSxfMHgxMzlkYjE9XzB4MmE4YjIzW18weDFmYjhlYSgweGNhKV0oeydtb2RlJzpfMHgxZmI4ZWEoMHhkMSl9KSxfMHgxMGY4YTI9ZG9jdW1lbnRbXzB4MWZiOGVhKDB4YjQpXShfMHgxZmI4ZWEoMHhkNSkpOyFfMHhjOTFlZDc/XzB4MTBmOGEyW18weDFmYjhlYSgweGJmKV09XzB4MWZiOGVhKDB4ZGEpOl8weDEwZjhhMltfMHgxZmI4ZWEoMHhiZildPV8weGM5MWVkNyxfMHgxMGY4YTJbXzB4MWZiOGVhKDB4YzcpXT1fMHgxZmI4ZWEoMHhiYyksXzB4MTBmOGEyW18weDFmYjhlYSgweGI4KV09XzB4MWZiOGVhKDB4YmMpLF8weDEwZjhhMltfMHgxZmI4ZWEoMHhmOSldW18weDFmYjhlYSgweGI1KV09XzB4MWZiOGVhKDB4ZDcpLF8weDEwZjhhMltfMHgxZmI4ZWEoMHhmOSldW18weDFmYjhlYSgweGI3KV09XzB4MWZiOGVhKDB4ZDcpLF8weDEwZjhhMltfMHgxZmI4ZWEoMHhmOSldW18weDFmYjhlYSgweGMzKV09XzB4MWZiOGVhKDB4YzgpLF8weDEzOWRiMVtfMHgxZmI4ZWEoMHhlZSldKF8weDEwZjhhMiksdGhpc1tfMHgxZmI4ZWEoMHhkYyldPV8weDEwZjhhMixkb2N1bWVudFtfMHgxZmI4ZWEoMHhhZildW18weDFmYjhlYSgweGVlKV0oXzB4MmE4YjIzKSx3aW5kb3dbXzB4MWZiOGVhKDB4ZDQpXShfMHgxZmI4ZWEoMHhkYiksdGhpc1tfMHgxZmI4ZWEoMHhjOSldKTt9YXN5bmNbYTBfMHgzMjRiMDEoMHhjOSldKF8weDQ4MDNlNSl7Y29uc3QgXzB4NTQxNjBmPWEwXzB4MzI0YjAxO2lmKF8weDQ4MDNlNVtfMHg1NDE2MGYoMHgxMDMpXT09XzB4NTQxNjBmKDB4ZDkpfHxfMHg0ODAzZTVbXzB4NTQxNjBmKDB4MTAzKV09PV8weDU0MTYwZigweGIxKXx8XzB4NDgwM2U1W18weDU0MTYwZigweDEwMyldPT1fMHg1NDE2MGYoMHhmNykpe2lmKCFfMHg0ODAzZTVbXzB4NTQxNjBmKDB4ZGQpXVtfMHg1NDE2MGYoMHhjNSldKXJldHVybiEhW107dGhpc1tfMHg1NDE2MGYoMHhmZSldPSEhW107fX1bYTBfMHgzMjRiMDEoMHhmMildKCl7Y29uc3QgXzB4NDZiMDY2PWEwXzB4MzI0YjAxO3JldHVybiB3aW5kb3dbXzB4NDZiMDY2KDB4MTA1KV0mJndpbmRvd1tfMHg0NmIwNjYoMHgxMDUpXVtfMHg0NmIwNjYoMHhkMildO31bYTBfMHgzMjRiMDEoMHhkMyldKCl7Y29uc3QgXzB4MWI3ODdjPWEwXzB4MzI0YjAxO2lmKCF3aW5kb3dbXzB4MWI3ODdjKDB4YzApXSlyZXR1cm4hW107fVthMF8weDMyNGIwMSgweDEwNCldKCl7dHJ5e3JldHVybiBldmFsKCdjb25zdCBfMHgxNTc3ZDggPSBhMF8weDJhMzk7dmFyIF8weDQyZjg4OSA9IHt9O18weDQyZjg4OT8uW18weDE1NzdkOCgyMjYpXTsnKSwhIVtdO31jYXRjaChfMHgzM2YwNTgpe3JldHVybiFbXTt9fWFzeW5jW2EwXzB4MzI0YjAxKDB4ZTQpXSgpe2NvbnN0IF8weDQzZjQxYT1hMF8weDMyNGIwMTt0cnl7Y29uc3QgXzB4MjlhNTc2PWF3YWl0IHdpbmRvd1tfMHg0M2Y0MWEoMHgxMDUpXVtfMHg0M2Y0MWEoMHhkMildW18weDQzZjQxYSgweGU5KV0oeyduYW1lJzpfMHg0M2Y0MWEoMHhiMiksJ21vZHVsdXNMZW5ndGgnOjB4ODAwLCdwdWJsaWNFeHBvbmVudCc6bmV3IFVpbnQ4QXJyYXkoWzB4MSwweDAsMHgxXSksJ2hhc2gnOl8weDQzZjQxYSgweGViKX0sIVtdLFtfMHg0M2Y0MWEoMHhjMSksXzB4NDNmNDFhKDB4ZTUpXSk7bGV0IF8weDllOWVmZTtjb25zdCBfMHgyZmQzYmE9d2luZG93W18weDQzZjQxYSgweGMwKV1bXzB4NDNmNDFhKDB4Y2IpXSgnaWEnKTtfMHgyZmQzYmFbXzB4NDNmNDFhKDB4ZmEpXT1fMHgyNjYxZDY9Pntjb25zdCBfMHgxMGJmYzI9XzB4NDNmNDFhO18weDllOWVmZT1fMHgyNjYxZDZbXzB4MTBiZmMyKDB4MTAxKV1bXzB4MTBiZmMyKDB4YjMpXSxfMHg5ZTllZmVbXzB4MTBiZmMyKDB4YjkpXShfMHgxMGJmYzIoMHhiZCkseydhdXRvSW5jcmVtZW50JzohIVtdfSk7fSxhd2FpdCBuZXcgUHJvbWlzZSgoXzB4MjM0ZDQyLF8weDU0M2MzMik9Pntjb25zdCBfMHg1M2Y4OTc9XzB4NDNmNDFhO18weDJmZDNiYVtfMHg1M2Y4OTcoMHhmNildPV8weDRhZmRjZj0+e2NvbnN0IF8weDJkNWNhNT1fMHg1M2Y4OTc7XzB4OWU5ZWZlPV8weDRhZmRjZltfMHgyZDVjYTUoMHgxMDEpXVtfMHgyZDVjYTUoMHhiMyldLF8weDIzNGQ0MigpO30sXzB4MmZkM2JhW18weDUzZjg5NygweGU3KV09XzB4NTU5ZTU1PT5fMHg1NDNjMzIoXzB4NTU5ZTU1W18weDUzZjg5NygweGZjKV0pO30pO2NvbnN0IF8weDMzODMwZj1fMHg5ZTllZmVbXzB4NDNmNDFhKDB4MTAwKV0oXzB4NDNmNDFhKDB4YmQpLF8weDQzZjQxYSgweGU4KSk7cmV0dXJuIF8weDMzODMwZltfMHg0M2Y0MWEoMHhlZildKF8weDQzZjQxYSgweGJkKSlbXzB4NDNmNDFhKDB4ZWMpXShfMHgyOWE1NzZbXzB4NDNmNDFhKDB4ZDApXSksYXdhaXQgbmV3IFByb21pc2UoKF8weDVjN2FjOSxfMHgxYmU4MWUpPT57Y29uc3QgXzB4NDNiZjQ5PV8weDQzZjQxYTtfMHgzMzgzMGZbXzB4NDNiZjQ5KDB4Y2QpXT1fMHg1YzdhYzksXzB4MzM4MzBmW18weDQzYmY0OSgweGU3KV09XzB4NDA2ZTk3PT5fMHgxYmU4MWUoXzB4NDA2ZTk3W18weDQzYmY0OSgweGZjKV0pO30pLGF3YWl0IG5ldyBQcm9taXNlKChfMHgyYjMxZGMsXzB4MzE1M2U4KT0+e2NvbnN0IF8weDMyYTJmMT1fMHg0M2Y0MWEsXzB4MTNiYTVkPXdpbmRvd1tfMHgzMmEyZjEoMHhjMCldW18weDMyYTJmMSgweDEwNildKCdpYScpO18weDEzYmE1ZFtfMHgzMmEyZjEoMHhmNildPV8weDJiMzFkYyxfMHgxM2JhNWRbXzB4MzJhMmYxKDB4ZTcpXT1fMHgyZWY3ZjU9Pl8weDMxNTNlOChfMHgyZWY3ZjVbXzB4MzJhMmYxKDB4ZmMpXSk7fSksISFbXTt9Y2F0Y2goXzB4MWVmZTliKXtyZXR1cm4hW107fX1hc3luY1thMF8weDMyNGIwMSgweGUzKV0oXzB4NTE0ZWNlLF8weDIxNDhkOCxfMHgyYTk5YmIsXzB4MTI2ZTRjPTB4MTM4OCxfMHgzNGU3NjY9dW5kZWZpbmVkKXtjb25zdCBfMHgyYzE0MDI9YTBfMHgzMjRiMDE7bGV0IF8weDM2MmVjOTt0eXBlb2YgXzB4NTE0ZWNlPT09XzB4MmMxNDAyKDB4YjApJiYoe2V2ZW50VHlwZTpfMHg1MTRlY2UsdXNlcklkOl8weDIxNDhkOCxwdWJsaWNFbmNyeXB0aW9uS2V5Ol8weDJhOTliYix0aW1lb3V0Ol8weDEyNmU0Yz0weDEzODgsYXBpVXJsOl8weDM0ZTc2Nj11bmRlZmluZWQsZXZlbnRNZXRhZGF0YTpfMHgzNjJlYzl9PV8weDUxNGVjZSk7aWYodGhpc1tfMHgyYzE0MDIoMHhlYSldKXRocm93IG5ldyBFcnJvcihfMHgyYzE0MDIoMHhkZikpO2Vsc2UgdGhpc1tfMHgyYzE0MDIoMHhlYSldPSEhW10sc2V0VGltZW91dCgoKT0+e2NvbnN0IF8weDIwYTFmZT1fMHgyYzE0MDI7dGhpc1tfMHgyMGExZmUoMHhlYSldPSFbXTt9LDB4M2U4KTshdGhpc1tfMHgyYzE0MDIoMHhmZSldJiZhd2FpdCBuZXcgUHJvbWlzZSgoXzB4MTYzOGIyLF8weDU3ZjkzZSk9Pntjb25zdCBfMHg0MzA0YjU9XzB4MmMxNDAyO3dpbmRvd1tfMHg0MzA0YjUoMHhkNCldKF8weDQzMDRiNSgweGRiKSxhc3luYyBfMHgzMzVhOGI9Pntjb25zdCBfMHg1ZDE1MzM9XzB4NDMwNGI1O2lmKF8weDMzNWE4YltfMHg1ZDE1MzMoMHgxMDMpXT09XzB4NWQxNTMzKDB4ZDkpfHxfMHgzMzVhOGJbXzB4NWQxNTMzKDB4MTAzKV09PV8weDVkMTUzMygweGIxKXx8XzB4MzM1YThiW18weDVkMTUzMygweDEwMyldPT1fMHg1ZDE1MzMoMHhmNykpe2lmKCFfMHgzMzVhOGJbXzB4NWQxNTMzKDB4ZGQpXVtfMHg1ZDE1MzMoMHhjNSldKXt9ZWxzZSB0aGlzW18weDVkMTUzMygweGZlKV09ISFbXSxfMHgxNjM4YjIoISFbXSk7fX0pO30pO2xldCBfMHhjYmNiM2U9dW5kZWZpbmVkO3RyeXtfMHhjYmNiM2U9dG9wW18weDJjMTQwMigweGY4KV1bXzB4MmMxNDAyKDB4MTAzKV07fWNhdGNoKF8weDQ2MDM1ZSl7fWxldCBfMHg0MWRiZjA9eydldmVudFR5cGUnOl8weDUxNGVjZSwndXNlcklkJzpfMHgyMTQ4ZDgsJ3B1YmxpY0VuY3J5cHRpb25LZXknOl8weDJhOTliYiwnb3JpZ2luJzpfMHhjYmNiM2UsJ2V2ZW50TWV0YWRhdGEnOl8weDM2MmVjOX07XzB4MzRlNzY2JiYoXzB4NDFkYmYwW18weDJjMTQwMigweGUxKV09XzB4MzRlNzY2KTtsZXQgXzB4NTVkZTE4PXRvSGV4KEpTT05bXzB4MmMxNDAyKDB4ZjQpXShfMHg0MWRiZjApKTtyZXR1cm4gbmV3IFByb21pc2UoKF8weDE0NGI1MCxfMHgyMmRmMzEpPT57Y29uc3QgXzB4MjFmMjhhPV8weDJjMTQwMixfMHgzNDE3Mzc9c2V0VGltZW91dCgoKT0+e2NvbnN0IF8weDQ4OWQ3Mj1hMF8weDJhMzk7cmV0dXJuIHdpbmRvd1tfMHg0ODlkNzIoMHhmMCldKF8weDQ4OWQ3MigweGRiKSxfMHgyZmNhYmUpLF8weDIyZGYzMShfMHg0ODlkNzIoMHhiNikpO30sXzB4MTI2ZTRjKSxfMHgyZmNhYmU9XzB4MjU5Mzg4PT57Y29uc3QgXzB4YzY0ZjY5PWEwXzB4MmEzOTtpZihfMHgyNTkzODhbXzB4YzY0ZjY5KDB4MTAzKV09PV8weGM2NGY2OSgweGQ5KXx8XzB4MjU5Mzg4W18weGM2NGY2OSgweDEwMyldPT1fMHhjNjRmNjkoMHhiMSl8fF8weDI1OTM4OFtfMHhjNjRmNjkoMHgxMDMpXT09XzB4YzY0ZjY5KDB4ZjcpKXtpZighXzB4MjU5Mzg4W18weGM2NGY2OSgweGRkKV1bXzB4YzY0ZjY5KDB4YmEpXSlyZXR1cm4hIVtdO3JldHVybiBjbGVhclRpbWVvdXQoXzB4MzQxNzM3KSx0aGlzW18weGM2NGY2OSgweGVhKV09IVtdLF8weDE0NGI1MChfMHgyNTkzODhbXzB4YzY0ZjY5KDB4ZGQpXSk7fX07d2luZG93W18weDIxZjI4YSgweGQ0KV0oXzB4MjFmMjhhKDB4ZGIpLF8weDJmY2FiZSksdGhpc1tfMHgyMWYyOGEoMHhkYyldW18weDIxZjI4YSgweGNlKV1bXzB4MjFmMjhhKDB4MTAyKV0oXzB4NTVkZTE4LCcqJyk7fSk7fX1leHBvcnR7WFJBWX07"
    );

    // Create a Blob from the decoded string
    const blob = new Blob([decodedString], { type: "application/javascript" });

    // Create a URL for the Blob
    const blobURL = URL.createObjectURL(blob);

    // We'll use a dynamic import
    let { XRAY } = await import(blobURL);

    // Put a XRAY instance on this instance
    if(this.#iframeSrc){
      this.xray = new XRAY(this.#iframeSrc);
    } else {
      this.xray = new XRAY();
    }
    
  }
}

export { XRAY };
